"Name"      = 'Think out Programming Language'
"Author"    =  'Beatriz de Brito, Cássio Santos, Dermeval Neves, Elvis Huges, Leandro Sampaio, Tayane Cerqueira'
"Version"   = '1.0'
"About"     = 'Language developed on course MI - Processadores de Linguagem de Programação from UEFS - 2018.1'

"Case Sensitive"     = True
"Start Symbol"      = <Program>

! Reference: http://www.goldparser.org/doc/grammars/index.htm

! =================================================
! Character Sets
! =================================================

{ID Head}       = {Letter}
{ID Tail}       = {Alphanumeric} + [_]

{String Chars}  = {Printable} + {AlphaNumeric} - ["\]

! =================================================
! Terminals
! =================================================

Identifier      = {ID Head}{ID Tail}*
Numbers         = ( '-' )? {Number}+ ( '.' {Number}+ )?
String          = '"' ({String Chars} | '\' {Printable})* '"'

! =================================================
! Rules
! =================================================

! -------------------------------------------------
! Function, Procedure and Start Declaration
! -------------------------------------------------

<Function Declaration>      ::= 'function' <Function Id> '(' <Function Procedure Tail>

<Procedure Declaration>     ::= 'procedure' Identifier '(' <Function Procedure Tail>

<Start Declaration>         ::= 'start' '(' ')' <Block>

<Function Procedure Tail>   ::= <Params Declaration> ')' <Block> 
                              | ')' <Block>

<Block>         ::= '{' <Block Aux>
<Block Aux>     ::= <Statement List> '}'
                  | '}'

<Function Id>   ::= <Type> Identifier

<Params Declaration>        ::= <Param> <Params Declaration Aux>
<Params Declaration Aux>    ::= ',' <Params Declaration>
                              | <>

<Param>         ::= <Type> Identifier

! -------------------------------------------------
! Type Declaration (Typedef)
! -------------------------------------------------

<Type Declaration>          ::= 'typedef' <Type Declaration Aux>
<Type Declaration Aux>      ::= <Type> Identifier ';'

! -------------------------------------------------
! Base and Declarations
! -------------------------------------------------

<Program>       ::= <Declaration> <Program Aux>
<Program Aux>   ::= <Program>
                  | <>

<Declaration>   ::= <Function Declaration>
                  | <Procedure Declaration>
                  | <Start Declaration>
                  | <Var Declaration>
                  | <Const Declaration>
                  | <Struct Declaration>
                  | <Type Declaration>

! -------------------------------------------------
! Statements
! -------------------------------------------------

<Statement List>        ::= <Statement> <Statement List Aux>
<Statement List Aux>    ::= <Statement List>
                          | <>

<Statement> ::= <Normal Statement>
              | <If Statement>
              | <While Statement>
              | <Var Declaration>
              | <Type Declaration>

<Normal Statement>      ::= <Op Assign> ';'
                          | <Struct Declaration> ';'
                          | <Return Statement> ';'
                          | <Print Statement> ';'
                          | <Scan Statement> ';'

<Return Statement>      ::= 'return' <Return Statement Aux>
<Return Statement Aux>  ::= <Expression> 
                          |  <>

! -------------------------------------------------
! Types
! -------------------------------------------------

<Type>      ::= <Type Base> <Type Aux>
<Type Aux>  ::= <Array Type>
              | <>

<Type Base> ::= <Scalar>
              | <Struct Declaration>
              | Identifier
              | 'struct' Identifier

<Scalar>    ::= 'int'
              | 'float'
              | 'bool'
              | 'string'

<Array Type>        ::= <Array Type Field> <Array Type Aux>
<Array Type Aux>    ::= <Array Type>
                      | <>

<Array Type Field>  ::= '[' ']'

! -------------------------------------------------
! Operator Precedence
! -------------------------------------------------

<Op Assign>     ::= <Value Write or Read> '=' <Expression>
                  | Identifier '=' <Expression>
                  | <Expression>

<Params>        ::= <Expression> <Params Aux>
<Params Aux>    ::= ',' <Params>
                  | <>

<Expression>        ::= <Op And> <Expression Aux>
<Expression Aux>    ::= '||' <Expression>
                      | <>

<Op And>        ::= <Op Relational> <Op And Aux>
<Op And Aux>    ::= '&&' <Op And>
                  | <>

<Op Relational>     ::= <Op Add> <Op Relational Aux>
<Op Relational Aux> ::= <Relational Symbol> <Op Relational>
                      | <>

<Relational Symbol> ::= '!='
                      | '=='
                      | '<'
                      | '<='
                      | '>'
                      | '>='

<Op Add>        ::= <Op Mult> <Op Add Aux>
<Op Add Aux>    ::= '+' <Op Mult> <Op Add Aux>
                  | '-' <Op Mult> <Op Add Aux>
                  | <>

<Op Mult>       ::= <Op Unary> <Op Mult Aux>
<Op Mult Aux>   ::= '*' <Op Unary> <Op Mult Aux>
                  | '/' <Op Unary> <Op Mult Aux>
                  | <>

<Op Unary>      ::= '!' <Op Unary>
                  | '++' <Op Unary>
                  | '--' <Op Unary>
                  | <Value Write or Read> <Unary Symbol>
                  | <Value Read Only> <Unary Symbol>
<Unary Symbol>  ::= '++'
                  | '--'
                  | <>

<Value Write or Read>   ::= Identifier <Accessing> 

<Accessing>             ::= <Field> <Accessing Aux>
<Accessing Aux>         ::= <Accessing>
                          | <>

<Field>                 ::= '.' Identifier ! Acesso de campo
                          | '[' <Expression> ']' ! Acesso de array

<Value Read Only>   ::= Identifier <Value Aux_1>
                      | '(' <Expression> ')'
                      | Numbers
                      | String
                      | 'true'
                      | 'false'
<Value Aux_1>       ::= '(' <Value Aux_2>
                  | <>
<Value Aux_2>       ::= <Params> ')'
                  | ')'

! -------------------------------------------------------------------
! Var Declaration
! -------------------------------------------------------------------

<Var Declaration>           ::= 'var'  '{'  <Var Body> '}'

<Var Body>      ::= <Var Row> <Var Body Aux>
<Var Body Aux>  ::= <Var Body>
                  | <> 

<Var Row>       ::= <Type> <Var Identifier List>

<Var Identifier List>       ::= <Var Identifier> <Var Identifier List Aux>
<Var Identifier List Aux>   ::= ';'
                              | ',' <Var Identifier List>

<Var Identifier>        ::= Identifier <Var Identifier Aux>
<Var Identifier Aux>    ::= '=' <Expression>
                          | <>

! -------------------------------------------------------------------
! Const Declaration
! -------------------------------------------------------------------

<Const Declaration>             ::= 'const'  '{'  <Const Body> '}'

<Const Body>        ::= <Const Row> <Const Body Aux>
<Const Body Aux>    ::= <Const Body>
                      | <>

<Const Row>         ::= <Type> <Const Identifier List>

<Const Identifier List>     ::= <Const Identifier> <Const Identifier List Aux>
<Const Identifier List Aux> ::= ';' 
                              | ',' <Const Identifier List>

<Const Identifier>  ::= Identifier '=' <Expression>

! -------------------------------------------------------------------
! Struct Declaration
! -------------------------------------------------------------------

<Struct Declaration>        ::= 'struct' <Struct Declaration Aux>
<Struct Declaration Aux>    ::= Identifier <Extends>'{'  <Struct Body> '}'
                              |  <Extends>'{'  <Struct Body> '}'
<Extends>   ::= 'extends' Identifier
              | <>

<Struct Body>       ::= <Struct Row> <Struct Body Aux>
<Struct Body Aux>   ::= <Struct Body>
                      | <>

<Struct Row>    ::= <Type> <Struct Identifier List>

<Struct Identifier List>        ::= <Struct Identifier> <Struct Identifier List Aux>
<Struct Identifier List Aux>    ::= ';'
                                  | ',' <Struct Identifier List>

<Struct Identifier>   ::= Identifier

! -------------------------------------------------------------------
! Conditional Statements
! -------------------------------------------------------------------

<If Statement>      ::= <If Then> <If Statement Aux>
<If Statement Aux>  ::= 'else' <Block>
                      | <>

<If Then> ::= 'if' '(' <Expression> ')' 'then' <Block>

! -------------------------------------------------------------------
! Repetition Statements
! -------------------------------------------------------------------

<While Statement> ::= 'while' '(' <Expression> ')' <Block>

! -------------------------------------------------------------------
! Print Statement & Scan Statement
! -------------------------------------------------------------------

<Print Statement>   ::= 'print' '(' <Output> <Output List> ')'
<Output>            ::= <Expression>
<Output List>       ::= ',' <Output> <Output List> 
                      | <>

<Scan Statement>    ::= 'scan' '(' <Input> <Input List> ')'
<Input>             ::= <Value Write or Read>  | Identifier
<Input List>        ::= ',' <Input> <Input List> 
                      | <>
